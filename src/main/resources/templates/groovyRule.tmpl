<%
def combinator = rule.combinator=='and'?'&&':'||'
def rules = rule.rules
def zeroFieldValue = new com.axelor.studio.service.constructor.components.expressions.dto.SimpleFieldValueDto("0")
%><%
if(rule.rules!=null && !rule.rules.isEmpty()){
rules.each{ childRule ->
%>${groovyScriptService.buildRule(childRule,metaModelVarName)}${rules.last()!=childRule?combinator:''}<%}%><%}%><%
if(rule.allField!=null && !rule.allField.isEmpty()){
if(!['notIn','in'].contains(rule.operator)){%>${['notLike','notBetween'].contains(rule.operator)?'!':''}${(['between','notBetween'].contains(rule.operator))?'(':''}${metaModelVarName}?.${groovyScriptService.buildFieldName(rule.allField)}<%}
if(rule.operator!=null){
    if('isNotNull'==rule.operator){%>!=null<%}
    if('isNull'==rule.operator){%>==null<%}
    if('isTrue'==rule.operator){%>==true<%}
    if('isFalse'==rule.operator){%>!=true<%}
    if(['!=','=','>=','<=','<','>'].contains(rule.operator)){
    rule.fieldValue = rule.fieldValue?:(['>=','<=','<','>'].contains(rule.operator)?zeroFieldValue:rule.fieldValue)
    %>${rule.operator!='='?rule.operator:'=='}${rule.fieldType=='STRING'?"'":''}${rule.fieldValue}${rule.fieldType=='STRING'?"'":''}<%}
    if(['notLike','like'].contains(rule.operator)){%>?.contains(${rule.fieldType=='STRING'?"'":''}${rule.fieldValue}${rule.fieldType=='STRING'?"'":''})<%}
    if(['notIn','in'].contains(rule.operator)){%>${'notIn'==rule.operator?'!':''}${rule.fieldValue}?.contains(${metaModelVarName}?.${groovyScriptService.buildFieldName(rule.allField)})<%}
    if(['between','notBetween'].contains(rule.operator)){
    %>>=${rule.fieldType=='STRING'?"'":''}${rule.fieldValue}${rule.fieldType=='STRING'?"'":''}&&${metaModelVarName}?.${groovyScriptService.buildFieldName(rule.allField)}<=${rule.fieldType=='STRING'?"'":''}${rule.fieldValue2}${rule.fieldType=='STRING'?"'":rule.fieldType}<%
    }
 }
}%>