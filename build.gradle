import com.axelor.gradle.support.ChangelogSupport

buildscript {
  ext.repos = {
    mavenCentral()
    maven {
      url = 'https://plugins.gradle.org/m2/'
    }
    maven { url = 'https://repository.axelor.com/nexus/repository/maven-public/' }
  }
  ext.aopVersion = aopVersion
  repositories repos
  buildscript.repositories repos
  dependencies {
    classpath "com.axelor:axelor-gradle:${aopVersion}"
    classpath 'com.adarshr:gradle-test-logger-plugin:4.0.0'
  }
}

repositories repos
buildscript.repositories repos

apply plugin: 'com.axelor.app'
apply plugin: 'com.adarshr.test-logger'
apply plugin: ChangelogSupport

apply from: 'gradle/version.gradle'
apply from: 'gradle/react.gradle'

try {
  tasks.named('spotlessCheck')
} catch (UnknownTaskException ignored) {
  apply from: './gradle/style.gradle'
}

testlogger {
  theme = 'mocha'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

group = 'com.axelor.addons'
description = 'Axelor Studio Module'

axelor {
  title 'Axelor Studio'
  description 'Axelor Studio Module'
}

test {
  exclude 'com/axelor/apps/baml/test/**'
}

dependencies {
  if (findProject(':modules:axelor-message') != null) {
    api project(':modules:axelor-message')
  } else {
    implementation 'com.axelor.addons:axelor-message:4.0.+'
  }
  if (findProject(':modules:axelor-utils') != null) {
    api project(':modules:axelor-utils')
  } else {
    implementation 'com.axelor.addons:axelor-utils:4.0.+'
  }

  implementation 'org.camunda.bpm:camunda-engine:7.23.0'
  implementation 'org.camunda.bpm:camunda-engine-plugin-spin:7.23.0'
  implementation 'org.camunda.spin:camunda-spin-dataformat-json-jackson:7.23.0'

  implementation 'org.apache.groovy:groovy-all:4.0.28'
  implementation 'org.eclipse.birt.runtime.3_7_1:Tidy:1'
  implementation 'org.apache.commons:commons-exec:1.5.0'
  implementation 'org.apache.commons:commons-text:1.14.0'
  implementation 'org.apache.commons:commons-lang3:3.18.0'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.19.2'
  implementation 'org.json:json:20250517'
  implementation 'org.reflections:reflections:0.10.2'

  implementation 'ch.qos.logback:logback-core:1.5.18'
  implementation 'ch.qos.logback:logback-classic:1.5.18'
  implementation 'org.yaml:snakeyaml:2.4'
  implementation 'jakarta.websocket:jakarta.websocket-api:2.1.1'
  implementation 'jakarta.websocket:jakarta.websocket-client-api:2.1.1'
  compileOnly 'org.projectlombok:lombok:1.18.38'
  annotationProcessor 'org.projectlombok:lombok:1.18.38'

  testCompileOnly 'org.projectlombok:lombok:1.18.38'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.38'
  testImplementation 'org.mockito:mockito-core:5.18.0'
}

changelog {
  version = baseVersion
  output.set(file('CHANGELOG.md'))
  inputPath.set(file('changelogs/unreleased'))
  types.set(['Feature', 'Change', 'Deprecate', 'Remove', 'Fix', 'Security'])
  header.set("${version.get()} (${new Date().format('yyyy-MM-dd')})")
}


//
// Publish
//

apply plugin: 'maven-publish'

ext {
  mavenUsername = project.findProperty('addonsMavenUsername')
  mavenPassword = project.findProperty('addonsMavenPassword')
}

publishing {
  repositories {
    maven {
      def repoPath = project.hasProperty('finalRelease')
          ? 'maven-releases'
          : 'maven-snapshots'
      name = 'maven'
      url = 'https://repository.axelor.com/nexus/repository/' + repoPath
      credentials {
        username = project.mavenUsername
        password = project.mavenPassword
      }
    }
  }
}

/*
* Jacoco
*/

apply plugin: 'jacoco'

jacoco {
  toolVersion = '0.8.13'
}

tasks.withType(JavaCompile).configureEach {
  // Only depend on frontCopy if it exists
  if (project.tasks.named('frontCopy') != null) {
    mustRunAfter project.tasks.named('frontCopy')
  }
}

tasks.named('spotlessJava') {
  mustRunAfter tasks.named('pnpmSetup')
}
tasks.named('spotlessMarkdown') {
  mustRunAfter tasks.named('pnpmSetup')
}

jacocoTestReport {
  reports {
    xml.required
  }
}

test {
  useJUnitPlatform()
  // report is always generated after tests run
  finalizedBy jacocoTestReport
  maxHeapSize = '1G'
}

jacocoTestReport {
  // tests are required to run before generating the report
  dependsOn test
}
