.base-env:
  image: axelor/app-builder:7.4
  interruptible: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: always

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

# Add wrapper and caches folders in cache
.base_cache: &base_cache
  paths:
    - .gradle/wrapper
    - .gradle/caches
  policy: pull-push

.base_cache_pull: &base_cache_pull
  <<: *base_cache
  policy: pull

# Build artifacts
build:
  extends: .base-env
  stage: build
  cache:
    - *base_cache
  script:
    - ./gradlew clean assemble -PaxelorMavenUsername=${NEXUS_READER_USERNAME} -PaxelorMavenPassword=${NEXUS_READER_PASSWORD}

# Check code formatting
spotless:
  extends: .base-env
  stage: test
  needs:
    - build
  cache:
    - *base_cache_pull
  allow_failure: true
  script:
    - ./gradlew spotlessCheck -PaxelorMavenUsername=${NEXUS_READER_USERNAME} -PaxelorMavenPassword=${NEXUS_READER_PASSWORD}

# Run unit tests
unit test:
  extends: .base-env
  stage: test
  needs:
    - build
  cache:
    - *base_cache
  allow_failure: true
  script:
    - ./gradlew test -PaxelorMavenUsername=${NEXUS_READER_USERNAME} -PaxelorMavenPassword=${NEXUS_READER_PASSWORD}
    - cat build/reports/jacoco/test/html/index.html | grep -o 'Total[^%]*%'
  artifacts:
    when: always
    paths:
      - build/test-results/test/**/TEST-*.xml
    reports:
      junit: build/test-results/test/**/TEST-*.xml
    expire_in: 1 week
  coverage: /Total.*?([0-9]{1,3})%/

.publish_template: &publish_configuration
  image: axelor/app-builder:7.4
  stage: plan
  cache:
    - *base_cache_pull
  script:
    - ./gradlew clean publish -PaxelorMavenUsername=${NEXUS_DEPLOYMENT_USERNAME} -PaxelorMavenPassword=${NEXUS_DEPLOYMENT_PASSWORD} -P${PUBLISH_TYPE}

publish snapshot:
  <<: *publish_configuration
  variables:
    PUBLISH_TYPE: "snapshotRelease"
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"

publish release:
  <<: *publish_configuration
  variables:
    PUBLISH_TYPE: "finalRelease"
  rules:
    - if: '$CI_COMMIT_TAG'

create release:
  stage: plan
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  cache:
    - *base_cache_pull
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "create release for $CI_COMMIT_TAG"
    - |
      RELEASE_DESCRIPTION=$(sed -n "/^## ${CI_COMMIT_TAG}/,/^## /p" CHANGELOG.md | sed '$d;$d')
      release-cli create --name "$CI_COMMIT_TAG" --description "$RELEASE_DESCRIPTION" --tag-name "$CI_COMMIT_TAG" --ref "$CI_COMMIT_TAG"